// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub.proto

package libpubsub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// PublishRequest is used to publish
// data to the specified topic
type PublishRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Topics struct {
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topics) Reset()         { *m = Topics{} }
func (m *Topics) String() string { return proto.CompactTextString(m) }
func (*Topics) ProtoMessage()    {}
func (*Topics) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{3}
}

func (m *Topics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topics.Unmarshal(m, b)
}
func (m *Topics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topics.Marshal(b, m, deterministic)
}
func (m *Topics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topics.Merge(m, src)
}
func (m *Topics) XXX_Size() int {
	return xxx_messageInfo_Topics.Size(m)
}
func (m *Topics) XXX_DiscardUnknown() {
	xxx_messageInfo_Topics.DiscardUnknown(m)
}

var xxx_messageInfo_Topics proto.InternalMessageInfo

func (m *Topics) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type PubSubMessage struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Seqno                []byte   `protobuf:"bytes,3,opt,name=seqno,proto3" json:"seqno,omitempty"`
	TopicIDs             string   `protobuf:"bytes,4,opt,name=topicIDs,proto3" json:"topicIDs,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Key                  []byte   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubSubMessage) Reset()         { *m = PubSubMessage{} }
func (m *PubSubMessage) String() string { return proto.CompactTextString(m) }
func (*PubSubMessage) ProtoMessage()    {}
func (*PubSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{4}
}

func (m *PubSubMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubSubMessage.Unmarshal(m, b)
}
func (m *PubSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubSubMessage.Marshal(b, m, deterministic)
}
func (m *PubSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubMessage.Merge(m, src)
}
func (m *PubSubMessage) XXX_Size() int {
	return xxx_messageInfo_PubSubMessage.Size(m)
}
func (m *PubSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubMessage proto.InternalMessageInfo

func (m *PubSubMessage) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PubSubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubSubMessage) GetSeqno() []byte {
	if m != nil {
		return m.Seqno
	}
	return nil
}

func (m *PubSubMessage) GetTopicIDs() string {
	if m != nil {
		return m.TopicIDs
	}
	return ""
}

func (m *PubSubMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PubSubMessage) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "libpubsub.Empty")
	proto.RegisterType((*PublishRequest)(nil), "libpubsub.PublishRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "libpubsub.SubscribeRequest")
	proto.RegisterType((*Topics)(nil), "libpubsub.Topics")
	proto.RegisterType((*PubSubMessage)(nil), "libpubsub.PubSubMessage")
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_91df006b05e20cf7) }

var fileDescriptor_91df006b05e20cf7 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0xac, 0xe9, 0x8b, 0xac, 0x0a, 0x2a, 0x2b, 0x0e, 0x26, 0x20, 0x54, 0xf9, 0x94, 0x53, 0x85,
	0xca, 0xad, 0x67, 0x1e, 0xe2, 0x80, 0x54, 0xa5, 0xfc, 0x40, 0x1c, 0x96, 0x62, 0xd1, 0x3c, 0x1a,
	0xdb, 0x48, 0xfd, 0x14, 0xbe, 0x88, 0xdf, 0x42, 0x76, 0xaa, 0x90, 0x02, 0xe2, 0x36, 0x33, 0xbb,
	0xde, 0x9d, 0xcc, 0x06, 0x46, 0xa5, 0x95, 0xda, 0xca, 0x69, 0x59, 0x15, 0xa6, 0xc0, 0x60, 0xad,
	0x64, 0x2d, 0x88, 0x21, 0xf4, 0x6f, 0xb3, 0xd2, 0x6c, 0xc5, 0x1c, 0x8e, 0x17, 0x56, 0xae, 0x95,
	0x7e, 0x8d, 0x69, 0x63, 0x49, 0x1b, 0x3c, 0x85, 0xbe, 0x29, 0x4a, 0x95, 0x72, 0x36, 0x61, 0x51,
	0x10, 0xd7, 0x04, 0x11, 0x7a, 0xcf, 0x89, 0x49, 0xf8, 0xc1, 0x84, 0x45, 0xa3, 0xd8, 0x63, 0x11,
	0xc1, 0x78, 0x69, 0xa5, 0x4e, 0x2b, 0x25, 0xe9, 0xdf, 0xd7, 0xe2, 0x12, 0x06, 0x4f, 0x0e, 0x68,
	0x57, 0xcf, 0x93, 0x8c, 0x34, 0x67, 0x93, 0xae, 0xab, 0x7b, 0x22, 0x3e, 0x18, 0x1c, 0x2d, 0xac,
	0x5c, 0x5a, 0xf9, 0x48, 0x5a, 0x27, 0x2b, 0x72, 0xfb, 0x5e, 0xaa, 0x22, 0xf3, 0x63, 0x46, 0xb1,
	0xc7, 0x7f, 0x79, 0x70, 0xf3, 0x34, 0x6d, 0xf2, 0x82, 0x77, 0xbd, 0x58, 0x13, 0x0c, 0xe1, 0xd0,
	0x2f, 0x7e, 0xb8, 0xd1, 0xbc, 0xe7, 0x8d, 0x34, 0x1c, 0x2f, 0x20, 0xd0, 0x6a, 0x95, 0x27, 0xc6,
	0x56, 0xc4, 0xfb, 0xfe, 0xd5, 0xb7, 0x80, 0x63, 0xe8, 0xbe, 0xd1, 0x96, 0x0f, 0xbc, 0xee, 0xe0,
	0xec, 0xb3, 0xf1, 0xb6, 0xa4, 0xea, 0x5d, 0xa5, 0x84, 0x33, 0x08, 0xee, 0xc9, 0xec, 0x3e, 0x68,
	0x3c, 0x6d, 0x52, 0x9d, 0xfa, 0x48, 0xc3, 0x93, 0x96, 0x52, 0x37, 0x89, 0x0e, 0xde, 0x41, 0xd0,
	0x64, 0x85, 0xe7, 0xad, 0x8e, 0x9f, 0x09, 0x86, 0xbc, 0x55, 0xdc, 0xcb, 0x44, 0x74, 0xae, 0x18,
	0xce, 0x61, 0xb8, 0xbb, 0x17, 0x9e, 0xed, 0x37, 0xb6, 0x6e, 0x18, 0xfe, 0x32, 0x25, 0x3a, 0x11,
	0x93, 0x03, 0xff, 0x1b, 0x5c, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x3b, 0x39, 0xa0, 0x16,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubServiceClient interface {
	// unary rpc
	GetTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Topics, error)
	// server-streaming rpc
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error)
	// Publish is used to send a stream of messages
	// on a pubsub topic
	Publish(ctx context.Context, opts ...grpc.CallOption) (PubSubService_PublishClient, error)
}

type pubSubServiceClient struct {
	cc *grpc.ClientConn
}

func NewPubSubServiceClient(cc *grpc.ClientConn) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) GetTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Topics, error) {
	out := new(Topics)
	err := c.cc.Invoke(ctx, "/libpubsub.PubSubService/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubService_serviceDesc.Streams[0], "/libpubsub.PubSubService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubService_SubscribeClient interface {
	Recv() (*PubSubMessage, error)
	grpc.ClientStream
}

type pubSubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceSubscribeClient) Recv() (*PubSubMessage, error) {
	m := new(PubSubMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (PubSubService_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubService_serviceDesc.Streams[1], "/libpubsub.PubSubService/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServicePublishClient{stream}
	return x, nil
}

type PubSubService_PublishClient interface {
	Send(*PublishRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type pubSubServicePublishClient struct {
	grpc.ClientStream
}

func (x *pubSubServicePublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubServicePublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServiceServer is the server API for PubSubService service.
type PubSubServiceServer interface {
	// unary rpc
	GetTopics(context.Context, *Empty) (*Topics, error)
	// server-streaming rpc
	Subscribe(*SubscribeRequest, PubSubService_SubscribeServer) error
	// Publish is used to send a stream of messages
	// on a pubsub topic
	Publish(PubSubService_PublishServer) error
}

func RegisterPubSubServiceServer(s *grpc.Server, srv PubSubServiceServer) {
	s.RegisterService(&_PubSubService_serviceDesc, srv)
}

func _PubSubService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libpubsub.PubSubService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).GetTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceServer).Subscribe(m, &pubSubServiceSubscribeServer{stream})
}

type PubSubService_SubscribeServer interface {
	Send(*PubSubMessage) error
	grpc.ServerStream
}

type pubSubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceSubscribeServer) Send(m *PubSubMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSubService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubServiceServer).Publish(&pubSubServicePublishServer{stream})
}

type PubSubService_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type pubSubServicePublishServer struct {
	grpc.ServerStream
}

func (x *pubSubServicePublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubServicePublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PubSubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libpubsub.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopics",
			Handler:    _PubSubService_GetTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSubService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _PubSubService_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
